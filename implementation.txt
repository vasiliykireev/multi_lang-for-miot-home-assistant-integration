Требования к реализации для properties.py

Назначение
- Извлекать человекочитаемые описания из MIoT JSON-спецификаций устройств и формировать JSON-структуру, удобную для lang-файлов интеграций Home Assistant.

Требования

1) Входной URN
- Скрипт принимает URN устройства MIoT как позиционный аргумент, например:
  urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1:1
  Примечание: многие URL MIoT используют суффикс ":1".
- При формировании верхнего ключа JSON и имени файла по умолчанию скрипт ДОЛЖЕН удалить конечный суффикс вида ":<digits>" (например ":1").
  Пример нормализованного URN:
  urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1

2) Получение спецификации
- По умолчанию получать JSON по адресу:
  http://miot-spec.org/miot-spec-v2/instance?type=<URN>
  где <URN> — переданный URN (чаще всего с ":1").
- Если HTTP-статус ответа != 200 — вывести информативное сообщение об ошибке и завершить с ненулевым кодом.
- Поддерживать чтение локального JSON-файла вместо HTTP через опцию --file / -f <path>.

3) Извлекаемые сущности
- Из спецификации извлекать описания (description/name/title и т.п.) для:
  - service:<siid>
  - service:<siid>:property:<piid>
  - service:<siid>:property:<piid>:valuelist:<index> (индекс форматируется тремя цифрами: 000, 001 ...)
  - service:<siid>:event:<eiid>
  - service:<siid>:action:<aiid>
- Поле value-list в спецификации может называться по-разному: value-list, valueList, value_list, values, enum и т.д. Скрипт должен поддерживать распространённые варианты.
- При извлечении описания предпочитать поля description/name/title; если description — объект с локализациями, предпочитать en, затем zh, затем default, иначе любую доступную строку.
- Пропускать пустые или отсутствующие описания; не включать пустые элементы valuelist.

4) Формат вывода
- Формировать JSON вида:
  {
    "<normalized_URN>": {
      "en": {
        "service:002": "...",
        "service:002:property:001": "...",
        "service:002:property:001:valuelist:000": "...",
        "service:002:action:002": "...",
        "service:005:event:001": "..."
      }
    }
  }
- Ключ языка фиксирован — "en" (скрипт парсит международную спецификацию и сохраняет оригинальные строки). Опция --lang отсутствует.
- Имя файла по умолчанию: <normalized_URN>.json (например: urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1.json).
- Имя файла по умолчанию ДОЛЖНО быть автоматически безопасным для файловых систем: реализовать безопасную нормализацию (замена символов, не входящих в [A-Za-z0-9._-], на подчёркивание). Пример имени файла:
  urn_miot-spec-v2_device_health-pot_0000A051_chunmi-a1.json
- При этом остаётся возможность явно задать имя через --output / -o <path>.

5) Опции командной строки
- Позиционный аргумент: <URN> (обязателен)
- --file / -f <path> — читать локальную спецификацию вместо HTTP
- --output / -o <path> — явно указать файл вывода; если не указан — использовать безопасно-нормализованный <normalized_URN>.json
- (Опционально) можно добавить --no-safe-filename для отключения автоматической безопасной нормализации; по умолчанию применяется безопасная нормализация.

6) Обработка ошибок
- HTTP со статусом ≠ 200: вывести код/URL и завершить с ненулевым кодом.
- Ошибки чтения файла: вывести сообщение и завершить с ненулевым кодом.
- Ошибки парсинга JSON: вывести информативное сообщение и завершить с ненулевым кодом.

7) Дополнительно (опционально)
- Unit-тесты для функций normalize_urn, safe filename, extract_description и обработки valuelist.
- Опция предпочтения локалей при извлечении описаний (если нужно).

8) Примеры
- Получить спецификацию по URN и сохранить в файл по умолчанию (безопасное имя):
  python3 properties.py 'urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1:1'
  -> создаст файл urn_miot-spec-v2_device_health-pot_0000A051_chunmi-a1.json

- Использовать локальную спецификацию и явный файл вывода:
  python3 properties.py 'urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1:1' --file spec.json --output out.json

9) Критерии приёмки
- Скрипт не должен содержать синтаксических ошибок.
- Для корректного JSON-ответа MIoT (или локального файла) скрипт должен формировать JSON с верхним ключом — нормализованным URN и языковым ключом "en".
- Имя по умолчанию должно быть безопасно-нормализовано как указано.


Создано автоматически в рамках сессии разработки.
